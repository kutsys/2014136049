# ~/.bashrc: executed by bash(1) for non-login shells. 
 // ~/.bashrc : 로그인 되지 않은 쉘을 위해, bash(1)에 의해서 실행된다. 
 # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) 
 // (bash-doc 패키지 안에 있는) /usr/share/doc/bash/examples/startup-files를 살펴봐라. 
 # for examples 
 // 예를 들면 
 # If not running interactively, don't do anything 
 // 쌍방향으로 작동하지 않는다면, 아무 것도 하지 마라. 
 case $- in  
 
 
     *i*) ;; 
 
 
       *) return;; 
 
 
 esac 
 
 
 # don't put duplicate lines or lines starting with space in the history. 
 // (명령어) 히스토리에 중복된 라인이나 공백으로 시작하는 라인을 넣지 마라.
 # See bash(1) for more options 
 // 더 많은 옵션에 대해 bash(1)을 보아라. 
 HISTCONTROL=ignoreboth // ignorespace, ignoredups의 옵션을 결한한 옵션으로 공백이나 탭, 마지막 입력라인과 일치하는 
 		                    // 라인을 입력하지않는다. 
                        //HISTCONTROL은 중복되어지는 명령에 대한 기록 유무를 지정하는 변수.
 
 
 # append to the history file, don't overwrite it 
 // 히스토리파일을 추가할때, 덮어씌우지 마라.
 shopt -s histappend // histroty를 추가하는 문장 
 
 
 # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) 
 // 히스토리 길이 설정을 위해 bash(1)의 HISTSIZE와 HISTFILESIZE를 보아라. 
 HISTSIZE=1000  // histroy에서  기억되는 명령어의 수. 마지막으로부터 입력된 값만큼 기억된다. 
 
 
 HISTFILESIZE=2000  // history 혹은 HISTFILE에 저장한 파일에 기록되는 최대 명령어의 수이다. 
 
 
 # check the window size after each command and, if necessary, 
 // 각 명령 후에 윈도우 창 크기를 확인하고 필요하다면,
 # update the values of LINES and COLUMNS. 
 // 행과 열의 값을 갱신한다.
 shopt -s checkwinsize // 해당 checkwinsize 옵션을 활성화 하는 명령어 
 
 
 # If set, the pattern "**" used in a pathname expansion context will 
 // 설정했따면, 경로이름 확장 문맥에서 사용되는 "**"패턴은 모든 파일과 0개 혹은 더 많은 디렉토리와 서브디렉토리들에
 # match all files and zero or more directories and subdirectories. 
 // 대응될 것이다.
 #shopt -s globstar // 모든 디렉터리를 보게 해준다 
 
 
 # make less more friendly for non-text input files, see lesspipe(1) 
 // 텍스트가 아닌 입력 파일들에 대해 less를 더 좋게 만든다. lesspipe(1)을 보아라. 
 
 
 [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)" 
 
 
 # set variable identifying the chroot you work in (used in the prompt below) 
 // chroot를 식별하기 위한 변수를 설정한다.(사용중인 프롬프트 밑에서) 
 if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then 
 
 
     debian_chroot=$(cat /etc/debian_chroot) 
 
 
 fi 
 
 
 # set a fancy prompt (non-color, unless we know we "want" color) 
 // 원하는 프롬프트를 설정한다. (설정하지 않는다면 색상이 없다)
 case "$TERM" in // $TERM 이후에 색이 들어간 프롬프트로 함 
 
 
     xterm-color) color_prompt=yes;; 
 
 
 esac 
 
 
 # uncomment for a colored prompt, if the terminal has the capability; turned 
 // 터미널이 사용가능하다면, 색상이있는 프롬프트를 사용한다. 
 # off by default to not distract the user: the focus in a terminal window 
 // 유저를 혼란스럽게 하지 않게 하기 위해 기본적으로 색상 기능을 꺼져 있따.
 # should be on the output of commands, not on the prompt 
 // 터미널 창의 중점은 프롬프트가 아니라 명령의 출력이다.
 #force_color_prompt=yes 
 
 
 if [ -n "$force_color_prompt" ]; then //  
 
 
     if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then 
 
 
     # We have color support; assume it's compliant with Ecma-48 
     //우리는 Ecma-48에 따르는 색상 지원을 가진다(ISO/IEC-6429)
 
 
     # (ISO/IEC-6429). (Lack of such support is extremely rare, and such 
     # a case would tend to support setf rather than setaf.) 
     //(대부분 이것을 지원하고 가끔 지원하지 않는 경우 staf보다 stf를 지원한다.)
 
 
     color_prompt=yes 
 
 
     else 
 
 
     color_prompt= 
 
 
     fi 
 
 
 fi 
 
 
 if [ "$color_prompt" = yes ]; then // 컬러 프롬프트인 경우 색을 추가하여 표시 
 
 
     PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ ' 
 
 
 else // 그외의 경우 
 
 
     PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ ' 
 
 
 fi 
 
 
 unset color_prompt force_color_prompt 
 
 
 # If this is an xterm set the title to user@host:dir 
 // xterm일 경우 타이틀을 user@host:dir로 설정한다. 
 case "$TERM" in 
 
 
 xterm*|rxvt*) 
 
 
     PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1" 
 
 
     ;; 
 
 
 *) 
 
 
     ;; 
 
 
 esac 
 
 
 # enable color support of ls and also add handy aliases 
 // ls가 색상지원을 사용할수있도록하고 유용한 alias들을 추가한다.
 if [ -x /usr/bin/dircolors ]; then 
 
 
     test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)" 
 
 
     alias ls='ls --color=auto' 
 
 
     #alias dir='dir --color=auto' 
 
 
     #alias vdir='vdir --color=auto' 
 
 
     alias grep='grep --color=auto' 
 
 
     alias fgrep='fgrep --color=auto' 
 
 
     alias egrep='egrep --color=auto' 
 
 
 fi 
 
 
 # some more ls aliases 
 // 약간의 ls alias를 더한다.
 alias ll='ls -alF' 
 
 
 alias la='ls -A' 
 
 
 alias l='ls -CF' 
 
 
 # Add an "alert" alias for long running commands.  Use like so: 
 // 긴 동작시간동안 작동하는 명령를위해 "alter" 명령을 추가한다. 다음과 같이 사용한다. 
 #   sleep 10; alert 
 
 
 alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"' 
 
 
 # Alias definitions. 
 // 명렁어 정의 
 # You may want to put all your additions into a separate file like 
 // ~/.bash_aliases와 같은 특정한 파일에 추가하고싶을지도 모른다.  
 # ~/.bash_aliases, instead of adding them here directly. 
 // 여기에 직접추가하는것 대신에 
 # See /usr/share/doc/bash-doc/examples in the bash-doc package. 
 // 그렇다면 bash-doc패키지에있는 /usr/share/doc/bash-doc/examples를 보아라 
 if [ -f ~/.bash_aliases ]; then 
 
 
     . ~/.bash_aliases 
 
 
 fi 
 
 
 # enable programmable completion features (you don't need to enable 
 // 활성화된 프로그래밍 가능한 특징들 (너는 필요로 하지않을것이다 사용가능한 이것들을, 
 # this, if it's already enabled in /etc/bash.bashrc and /etc/profile 
 // 만약 그것을이 모두 in /etc/bash.bashrc와 /etc/profile에서 이미 활성화 되었다면)
 # sources /etc/bash.bashrc). 
 
 
 if ! shopt -oq posix; then 
 
 
   if [ -f /usr/share/bash-completion/bash_completion ]; then 
 
 
     . /usr/share/bash-completion/bash_completion 
 
 
   elif [ -f /etc/bash_completion ]; then 
 
 
     . /etc/bash_completion 
 
 
   fi 
 
 
 fi 
